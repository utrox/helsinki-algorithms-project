import pytest
from encoding import encode_message, decode_message, double_decode_message, double_encode_message


# 2048-bit generated RSA keypair values
SENDER_PUBLIC_EXPONENT = 65537
SENDER_PRIVATE_EXPONENT = 1177037140071607537311053471265147492014365719605714461041172161069432250641170192706906801272367714319570464707893182570580941606204876243017133395196800137573260439921997919435001565410064530317056440852282600556433870602585760167400806182465213739764391799523033080215251098822060873413899025913820368995622193071884161117975909913537775396802805282216574586457472833263347083092358765346880696892169577728990059786756537872725258483399558564340893357055685939728187127560614949517928301321536373727736038500969764026197826196707058091113383687296296078629275926368333046949901778990300091910199932654169543520417
SENDER_MODULUS = 1797871697405326601704994903889991404096058503840947854222143754253656397945983566853879434927216773723061798945629877083115722044605625654654683991073805309656895759361580609845049587290341656723743251856058471837668544671646458865681877471221337641890153949688645387080289732519959993029569301759988009203137157243540772108979336396593099350427642670808834959630388522888331399225369556627729325354893213545870850354848412466147796547518459750795405945606876663151837144189281913734931819497039416156123164982741143201692435646884399480579745645959386184255798965550737534732450869638021058160673676269235659862143

RECIEVER_PUBLIC_EXPONENT = 65537
RECIEVER_PRIVATE_EXPONENT = 2407133264775735021065140583490911386580026631607282128894212407894375197890096412289138288715463454071877266284557654798767557386457479640209417836671757128756215524960628336298546049351593764192438593026434605698339821564919899865489391589770276220208131973585281813398201596922988647178961699692074355851485595350486045266076066005859828891043878763692030259101957043965350332847145690065866243799182980810489415084104321221032181525838192521109672527229821820975139158272160759303127841044861925736958098894840242665166237897737437861801038957508566245379518679137698123508124898572945659589548819807912355156533
RECIEVER_MODULUS = 10187684389642063033616152303535283147710378130813461342030351861554644323159396097655360415082036060026388143396257993060822047687198181671320931014656567448969718880164333178947227151201511173644161967786467210439270060439144686954121941015096841630208611246552057746508100617212909717156449009539520636709205182513544608900705259614689157167410269678879835307873225445336379671886876799064833232549874495211620670577077522869093275493984386881165694254390419804437107775747743257492499002520465818122106799375906351935307144349663410005065536685662809837164240342074842075791031756595288427301247439170743240889121
GENERATED_BITS = 2048

def test_publickey_encoding_privatekey_decoding_message():
    ORIGINAL_MESSAGE = "Hello world!"

    # Encoding with public key, for security
    encoded: int = encode_message(ORIGINAL_MESSAGE, RECIEVER_PUBLIC_EXPONENT, RECIEVER_MODULUS, GENERATED_BITS)
    decoded: str = decode_message(encoded, RECIEVER_PRIVATE_EXPONENT, RECIEVER_MODULUS)
    assert ORIGINAL_MESSAGE == decoded, "The two messages do not match."


def test_privatekey_encoding_publickey_decoding_message():
    ORIGINAL_MESSAGE = "Hello world!"

    # Encoding with private key, as signature
    encoded2: int = encode_message(ORIGINAL_MESSAGE, SENDER_PRIVATE_EXPONENT, SENDER_MODULUS, GENERATED_BITS)
    decoded2: str = decode_message(encoded2, SENDER_PUBLIC_EXPONENT, SENDER_MODULUS)
    assert ORIGINAL_MESSAGE == decoded2, "The two messages do not match."


def test_encoding_message_too_long():
    with pytest.raises(Exception) as e:
        encode_message("a" * GENERATED_BITS // 8, SENDER_PUBLIC_EXPONENT, SENDER_MODULUS, GENERATED_BITS)


def test_double_encoding():
    ORIGINAL_MESSAGE = "Hello world!"
    encoded_int: int = double_encode_message(
        ORIGINAL_MESSAGE, 
        RECIEVER_PUBLIC_EXPONENT, 
        RECIEVER_MODULUS, 
        SENDER_PRIVATE_EXPONENT, 
        SENDER_MODULUS, 
        GENERATED_BITS
    )
    decoded: str = double_decode_message(
        encoded_int,
        SENDER_PUBLIC_EXPONENT, 
        SENDER_MODULUS, 
        RECIEVER_PRIVATE_EXPONENT, 
        RECIEVER_MODULUS
    )
    print(decoded)